{"version":3,"sources":["ErrorModal.jsx"],"names":[],"mappings":";;AAAA,IAAI,QAAQ,QAAQ,OAAR,CAAZ;AACA,IAAI,WAAW,QAAQ,WAAR,CAAf;AACA,IAAI,iBAAiB,QAAQ,kBAAR,CAArB;;;;;AAKA,IAAI,aAAa,MAAM,WAAN,CAAkB;AAAA;;AAC/B,eAAmB;AACf,eAAS,MAAM,SAAN,CAAgB,MADV;AAEf,iBAAS,MAAM,SAAN,CAAgB,MAAhB,CAAuB;AAFjB,KADY;AAK/B,qBAAmB,2BAAY;AAC3B,eAAO;AACH,mBAAO;AADJ,SAAP;AAIH,KAV8B;;;;AAa/B,uBAAmB,6BAAY;AAAA,qBACJ,KAAK,KADD;YACtB,KADsB,UACtB,KADsB;YACf,OADe,UACf,OADe;;;AAG3B,YAAI,cAEA;AAAA;YAAA,EAAK,IAAG,aAAR,EAAsB,WAAU,yBAAhC,EAA0D,eAAY,EAAtE;YACI;AAAA;gBAAA;gBAAK;AAAL,aADJ;YAEI;AAAA;gBAAA;gBAAI;AAAJ,aAFJ;YAGI;AAAA;gBAAA;gBAMI;AAAA;oBAAA,EAAQ,WAAU,eAAlB,EAAkC,cAAW,EAA7C;oBAAA;AAAA;AANJ;AAHJ,SAFJ;;;AAiBA,YAAI,SAAS,EAAE,eAAe,cAAf,CAA8B,WAA9B,CAAF,CAAb;;;AAGA,UAAE,SAAS,WAAT,CAAqB,IAArB,CAAF,EAA8B,IAA9B,CAAmC,MAAnC;;AAEA,YAAI,QAAQ,IAAI,WAAW,MAAf,CAAsB,EAAE,cAAF,CAAtB,CAAZ;;AAEA,cAAM,IAAN;AACH,KAzC8B;AA0C/B,YAAmB,kBAAY;;;AAG3B,eACI,6BAAK,WAAU,cAAf,GADJ;AAKH;AAlD8B,CAAlB,CAAjB;;AAqDA,OAAO,OAAP,GAAiB,UAAjB","file":"ErrorModal.js","sourcesContent":["let React = require('react');\r\nlet ReactDOM = require('react-dom');\r\nlet ReactDOMServer = require('react-dom/server');\r\n\r\n// Using Error Modal Foundation component\r\n// By default modals are hidden\r\n// data-reveal lets Foundation know that we are dealing with a module\r\nlet ErrorModal = React.createClass({\r\n    propTypes        : {\r\n        title  : React.PropTypes.string,\r\n        message: React.PropTypes.string.isRequired\r\n    },\r\n    getDefaultProps  : function () {\r\n        return {\r\n            title: 'Error'\r\n        };\r\n\r\n    },\r\n    // Invoked immediately after a component is mounted\r\n    // Initialization that requires DOM nodes should go here\r\n    componentDidMount: function () {\r\n        let {title, message} = this.props;\r\n\r\n        let modalMarkup = (\r\n            // Empty string is required for the custom attributes to be rendered\r\n            <div id=\"error-modal\" className=\"reveal tiny text-center\" data-reveal=\"\">\r\n                <h4>{title}</h4>\r\n                <p>{message}</p>\r\n                <p>\r\n                    {\r\n                        /* When used on an elemenet inside of Modal\r\n                         * when click it will automatically close the modal\r\n                         */\r\n                    }\r\n                    <button className=\"button hollow\" data-close=\"\">Okay</button>\r\n                </p>\r\n            </div>\r\n        );\r\n\r\n        // Transform jsx code to string\r\n        let $modal = $(ReactDOMServer.renderToString(modalMarkup));\r\n        // Add the markup to the DOM\r\n        // Takes the component and returns the DOM node where that component lives\r\n        $(ReactDOM.findDOMNode(this)).html($modal);\r\n\r\n        let modal = new Foundation.Reveal($('#error-modal'));\r\n        // Show the modal\r\n        modal.open();\r\n    },\r\n    render           : function () {\r\n        // After React puts the elements in the DOM, Foundation is removing them\r\n        // so we move the functionality of render to the componentDidMount\r\n        return (\r\n            <div className=\"the-dom-node\">\r\n\r\n            </div>\r\n        );\r\n    }\r\n});\r\n\r\nmodule.exports = ErrorModal;\r\n\r\n// PropTypes is a way to define which properties a component expects the values (string, number or function)\r\n// and whether or not it's required\r\n\r\n// If I require a message property and it doesn't get passed down, the component is still gonna try to render itself\r\n// The only thing that is gonna happen is that an error message is gonna get thrown on the web developer console"]}