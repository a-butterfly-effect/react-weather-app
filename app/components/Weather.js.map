{"version":3,"sources":["Weather.jsx"],"names":[],"mappings":";;AAAA,IAAI,QAAQ,QAAQ,OAAR,CAAZ;;AAEA,IAAI,cAAc,QAAQ,aAAR,CAAlB;AACA,IAAI,iBAAiB,QAAQ,gBAAR,CAArB;AACA,IAAI,iBAAiB,QAAQ,gBAAR,CAArB;;;AAGA,IAAI,UAAU,MAAM,WAAN,CAAkB;AAAA;;;AAE5B,qBAAiB,2BAAY;;;;;;;AAOzB,eAAO;AACH,uBAAW;AADR,SAAP;AAGH,KAZ2B;;AAc5B,kBAAiB,sBAAU,QAAV,EAAoB;;;;;;;;;;AAUjC,YAAI,OAAO,IAAX;;;;;;;;;AASA,aAAK,QAAL,CAAc,EAAC,WAAW,IAAZ,EAAd;;AAEA,uBAAe,cAAf,CAA8B,QAA9B,EAAwC,IAAxC,CACI,UAAU,WAAV,EAAuB;;AAEnB,iBAAK,QAAL,CAAc;AACV,0BAAW,QADD;AAEV,sBAAW,WAFD;AAGV,2BAAW;AAHD,aAAd;AAKH,SARL,EASI,UAAU,YAAV,EAAwB;AACpB,iBAAK,QAAL,CAAc,EAAC,WAAW,KAAZ,EAAd;AACA,kBAAM,YAAN;AACH,SAZL;AAcH,KAjD2B;AAkD5B,YAAiB,kBAAY;;;AAAA,qBAGW,KAAK,KAHhB;YAGlB,SAHkB,UAGlB,SAHkB;YAGP,QAHO,UAGP,QAHO;YAGG,IAHH,UAGG,IAHH;;;;AAMzB,iBAAS,aAAT,GAAyB;AACrB,gBAAI,SAAJ,EAAe;AACX,uBAAO;AAAA;oBAAA,EAAI,WAAU,aAAd;oBAAA;AAAA,iBAAP;AACH,aAFD,MAEO,IAAI,QAAQ,QAAZ,EAAsB;AACzB,uBAAO,oBAAC,cAAD,IAAgB,UAAU,QAA1B,EAAoC,MAAM,IAA1C,GAAP;AACH;AACJ;;AAED,eACI;AAAA;YAAA;YACI;AAAA;gBAAA,EAAI,WAAU,aAAd;gBAAA;AAAA,aADJ;YAEI,oBAAC,WAAD,IAAa,UAAU,KAAK,YAA5B,GAFJ;YAGK;AAHL,SADJ;AAOH;AAvE2B,CAAlB,CAAd;;AA0EA,OAAO,OAAP,GAAiB,OAAjB","file":"Weather.js","sourcesContent":["let React = require('react');\r\n\r\nlet WeatherForm = require('WeatherForm');\r\nlet WeatherMessage = require('WeatherMessage');\r\nlet openWeatherMap = require('openWeatherMap');\r\n\r\n// The Weather component will maintain state e.g. location and the temperature\r\nlet Weather = React.createClass({\r\n    // Initiate default state\r\n    getInitialState: function () {\r\n        // return {\r\n        //     location: 'Miami',\r\n        //     temp    : 88\r\n        // };\r\n\r\n        // Add loader\r\n        return {\r\n            isLoading: false\r\n        };\r\n    },\r\n    // Receive the onSearch() function from the child WeatherForm component\r\n    handleSearch   : function (location) {\r\n        // alert(location);\r\n\r\n        // Initialize the state based on the location sent from the child Weather Form component\r\n        // this.setState({\r\n        //     location: location,\r\n        //     temp    : 23\r\n        // });\r\n\r\n        // !!! workaround for this getting lost\r\n        var that = this;\r\n\r\n        // Debugger!!!\r\n        // JavaScript classic debugging\r\n        // !!!\r\n        // debugger;\r\n        // !!!\r\n\r\n        // Fire loader\r\n        this.setState({isLoading: true});\r\n\r\n        openWeatherMap.getTemperature(location).then(\r\n            function (temperature) {\r\n                // this gets lost and uses for openWeatherMap\r\n                that.setState({\r\n                    location : location,\r\n                    temp     : temperature,\r\n                    isLoading: false\r\n                });\r\n            },\r\n            function (errorMessage) {\r\n                that.setState({isLoading: false});\r\n                alert(errorMessage);\r\n            }\r\n        );\r\n    },\r\n    render         : function () {\r\n        // I know that it exists in the state object\r\n        // Retrieve location and map variable off from the state\r\n        const {isLoading, location, temp} = this.state;\r\n\r\n        // Conditionally render components given a certain state\r\n        function renderMessage() {\r\n            if (isLoading) {\r\n                return <h3 className=\"text-center\">Fetching weather ...</h3>;\r\n            } else if (temp && location) {\r\n                return <WeatherMessage location={location} temp={temp}/>;\r\n            }\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <h1 className=\"text-center\">Get Weather</h1>\r\n                <WeatherForm onSearch={this.handleSearch}/>\r\n                {renderMessage()}\r\n            </div>\r\n        );\r\n    }\r\n});\r\n\r\nmodule.exports = Weather;"]}